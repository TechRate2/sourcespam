/**
 * AUTO AUTH CLEANUP
 * T·ª± ƒë·ªông d·ªçn d·∫πp v√† x·ª≠ l√Ω authentication state
 */

export class AutoAuthCleanup {
  private static instance: AutoAuthCleanup;

  static getInstance(): AutoAuthCleanup {
    if (!AutoAuthCleanup.instance) {
      AutoAuthCleanup.instance = new AutoAuthCleanup();
    }
    return AutoAuthCleanup.instance;
  }

  /**
   * Ki·ªÉm tra v√† d·ªçn d·∫πp auth state
   */
  async cleanupAuthState(): Promise<void> {
    try {
      console.log('üßπ Auto-cleanup: Checking auth state...');
      
      const accessToken = localStorage.getItem('accessToken');
      const refreshToken = localStorage.getItem('refreshToken');
      
      if (!accessToken && !refreshToken) {
        console.log('‚úÖ No tokens found, state is clean');
        return;
      }

      // Ki·ªÉm tra token validity
      if (accessToken) {
        const isValid = await this.validateToken(accessToken);
        if (!isValid) {
          console.log('üßπ Invalid access token detected, clearing...');
          this.clearAllAuthData();
          return;
        }
      }

      console.log('‚úÖ Auth state is valid');
    } catch (error) {
      console.log('üßπ Error during auth cleanup, clearing all data...');
      this.clearAllAuthData();
    }
  }

  /**
   * Validate token v·ªõi server
   */
  private async validateToken(token: string): Promise<boolean> {
    try {
      const response = await fetch('/api/auth/me', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      return response.ok;
    } catch (error) {
      return false;
    }
  }

  /**
   * Clear to√†n b·ªô auth data
   */
  clearAllAuthData(): void {
    console.log('üßπ Clearing all authentication data...');
    
    // Clear localStorage
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    
    // Clear sessionStorage n·∫øu c√≥
    sessionStorage.removeItem('accessToken');
    sessionStorage.removeItem('refreshToken');
    
    // Clear any cached user data
    localStorage.removeItem('userData');
    localStorage.removeItem('userPreferences');
    
    console.log('‚úÖ All auth data cleared');
  }

  /**
   * Force logout v√† redirect
   */
  forceLogout(): void {
    console.log('üö™ Force logout triggered...');
    
    this.clearAllAuthData();
    
    // Force redirect to landing page
    window.location.href = '/';
  }

  /**
   * Kh·ªüi t·∫°o auto-cleanup khi load page
   */
  initializeAutoCleanup(): void {
    console.log('üöÄ Initializing auto auth cleanup...');
    
    // Cleanup ngay khi load
    this.cleanupAuthState();
    
    // Listen for storage changes t·ª´ other tabs
    window.addEventListener('storage', (event) => {
      if (event.key === 'accessToken' || event.key === 'refreshToken') {
        console.log('üîÑ Auth storage changed, re-validating...');
        this.cleanupAuthState();
      }
    });
    
    // Cleanup ƒë·ªãnh k·ª≥ m·ªói 5 ph√∫t
    setInterval(() => {
      this.cleanupAuthState();
    }, 5 * 60 * 1000);
    
    console.log('‚úÖ Auto auth cleanup initialized');
  }

  /**
   * Handle JWT secret changes
   */
  handleJWTSecretChange(): void {
    console.log('üîß JWT secret change detected, forcing auth cleanup...');
    
    // Khi JWT secret thay ƒë·ªïi, t·∫•t c·∫£ tokens s·∫Ω invalid
    this.clearAllAuthData();
    
    // Show notification n·∫øu c·∫ßn
    try {
      if (typeof window !== 'undefined' && 'Notification' in window && Notification.permission === 'granted') {
        new Notification('H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t', {
          body: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ti·∫øp t·ª•c',
          icon: '/favicon.ico'
        });
      }
    } catch (error) {
      console.log('Notification not available');
    }
  }

  /**
   * Detect v√† handle system updates
   */
  detectSystemUpdates(): void {
    // Ki·ªÉm tra n·∫øu c√≥ system version change (safe for browser)
    try {
      const lastVersion = localStorage.getItem('systemVersion');
      const currentVersion = '1.0.0'; // Static version for now
      
      if (lastVersion && lastVersion !== currentVersion) {
        console.log('üîÑ System update detected, cleaning up...');
        this.clearAllAuthData();
        localStorage.setItem('systemVersion', currentVersion);
      } else if (!lastVersion) {
        localStorage.setItem('systemVersion', currentVersion);
      }
    } catch (error) {
      console.log('Version check skipped');
    }
  }
}

// Export singleton instance
export const autoAuthCleanup = AutoAuthCleanup.getInstance();