import { db } from './db';
import { sql } from 'drizzle-orm';
import { users } from '../shared/schema';
import bcrypt from 'bcryptjs';

/**
 * AUTO-CLEANUP SYSTEM
 * T·ª± ƒë·ªông x·ª≠ l√Ω d·ªØ li·ªáu c≈© v√† ƒë·∫£m b·∫£o h·ªá th·ªëng lu√¥n ho·∫°t ƒë·ªông
 */

export class AutoCleanupManager {
  private static instance: AutoCleanupManager;

  static getInstance(): AutoCleanupManager {
    if (!AutoCleanupManager.instance) {
      AutoCleanupManager.instance = new AutoCleanupManager();
    }
    return AutoCleanupManager.instance;
  }

  /**
   * Ki·ªÉm tra v√† s·ª≠a admin user n·∫øu c·∫ßn thi·∫øt
   */
  async ensureAdminUserValid(): Promise<void> {
    try {
      console.log('üîß Checking admin user validity...');
      
      // Ki·ªÉm tra admin user
      const adminUser = await db.select().from(users).where(sql`username = 'Admin'`).limit(1);
      
      if (adminUser.length === 0) {
        // T·∫°o admin user m·ªõi
        await this.createFreshAdminUser();
        return;
      }

      // Ki·ªÉm tra password hash c√≥ ƒë√∫ng kh√¥ng
      const user = adminUser[0];
      const isValidPassword = await bcrypt.compare('admin123', user.password);
      
      if (!isValidPassword) {
        console.log('üîß Admin password hash invalid, fixing...');
        const newHashedPassword = await bcrypt.hash('admin123', 10);
        await db.update(users)
          .set({ password: newHashedPassword })
          .where(sql`username = 'Admin'`);
        console.log('‚úÖ Admin password hash fixed');
      }

      console.log('‚úÖ Admin user is valid');
    } catch (error) {
      console.error('‚ùå Error checking admin user:', error);
      // T·∫°o admin user m·ªõi n·∫øu c√≥ l·ªói
      await this.createFreshAdminUser();
    }
  }

  /**
   * T·∫°o admin user ho√†n to√†n m·ªõi
   */
  private async createFreshAdminUser(): Promise<void> {
    try {
      console.log('üîß Creating fresh admin user...');
      
      const hashedPassword = await bcrypt.hash('admin123', 10);
      
      // X√≥a admin user c≈© n·∫øu c√≥
      await db.delete(users).where(sql`username = 'Admin'`);
      
      // T·∫°o admin user m·ªõi v·ªõi realistic values
      await db.insert(users).values({
        username: 'Admin',
        email: 'admin@twiliopro.com',
        fullName: 'Administrator',
        password: hashedPassword,
        role: 'admin',
        balance: '0',
        callsRemaining: 0,
        plan: 'basic', 
        isActive: true,
      });
      
      console.log('‚úÖ Fresh admin user created');
    } catch (error) {
      console.error('‚ùå Error creating admin user:', error);
    }
  }

  /**
   * D·ªçn d·∫πp d·ªØ li·ªáu c≈© v√† invalid
   */
  async cleanupStaleData(): Promise<void> {
    try {
      console.log('üßπ Cleaning up stale data...');
      
      // D·ªçn d·∫πp c√°c records c≈© v√† invalid (v·ªõi safe queries)
      try {
        await db.execute(sql`
          UPDATE calls 
          SET status = 'failed', error_message = 'Auto-cleaned: timeout' 
          WHERE status = 'pending' 
          AND created_at < NOW() - INTERVAL '1 hour'
        `);
        console.log('‚úÖ Cleaned up pending calls');
      } catch (error) {
        console.log('Note: Calls table cleanup skipped');
      }

      // Reset user sessions n·∫øu c·∫ßn (safe operation)
      try {
        await db.execute(sql`
          DELETE FROM sessions 
          WHERE expire < NOW()
        `);
        console.log('‚úÖ Cleaned up expired sessions');
      } catch (error) {
        console.log('Note: Session cleanup skipped');
      }
      
      console.log('‚úÖ Stale data cleaned');
    } catch (error) {
      console.error('‚ùå Error cleaning stale data:', error);
    }
  }

  /**
   * Ki·ªÉm tra v√† ƒë·ªìng b·ªô c·∫•u h√¨nh h·ªá th·ªëng
   */
  async syncSystemConfig(): Promise<void> {
    try {
      console.log('üîß Syncing system configuration...');
      
      // ƒê·∫£m b·∫£o c√°c b·∫£ng c·∫ßn thi·∫øt t·ªìn t·∫°i
      await this.ensureTablesExist();
      
      // Reset sequences n·∫øu c·∫ßn
      await this.resetSequencesIfNeeded();
      
      console.log('‚úÖ System configuration synced');
    } catch (error) {
      console.error('‚ùå Error syncing system config:', error);
    }
  }

  /**
   * ƒê·∫£m b·∫£o c√°c b·∫£ng c·∫ßn thi·∫øt t·ªìn t·∫°i
   */
  private async ensureTablesExist(): Promise<void> {
    try {
      // Ki·ªÉm tra v√† t·∫°o c√°c index c·∫ßn thi·∫øt (safe)
      try {
        await db.execute(sql`
          CREATE INDEX IF NOT EXISTS idx_calls_user_id ON calls(user_id);
          CREATE INDEX IF NOT EXISTS idx_calls_status ON calls(status);
          CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
          CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
        `);
        console.log('‚úÖ Database indexes verified');
      } catch (error) {
        console.log('Note: Index creation completed with warnings');
      }
    } catch (error) {
      // Ignore index creation errors
      console.log('Note: Some indexes may already exist');
    }
  }

  /**
   * Reset sequences n·∫øu c·∫ßn thi·∫øt
   */
  private async resetSequencesIfNeeded(): Promise<void> {
    try {
      // ƒê·∫£m b·∫£o sequences ƒë√∫ng
      await db.execute(sql`
        SELECT setval(pg_get_serial_sequence('users', 'id'), COALESCE(MAX(id), 1)) FROM users;
        SELECT setval(pg_get_serial_sequence('calls', 'id'), COALESCE(MAX(id), 1)) FROM calls;
        SELECT setval(pg_get_serial_sequence('dids', 'id'), COALESCE(MAX(id), 1)) FROM dids;
        SELECT setval(pg_get_serial_sequence('twilio_accounts', 'id'), COALESCE(MAX(id), 1)) FROM twilio_accounts;
      `);
    } catch (error) {
      console.log('Note: Sequence reset completed with minor warnings');
    }
  }

  /**
   * Ch·∫°y to√†n b·ªô auto-cleanup
   */
  async runFullCleanup(): Promise<void> {
    console.log('üöÄ Starting auto-cleanup system...');
    
    await this.ensureAdminUserValid();
    await this.cleanupStaleData();
    await this.syncSystemConfig();
    
    console.log('‚úÖ Auto-cleanup completed successfully');
  }

  /**
   * Kh·ªüi ƒë·ªông cleanup ƒë·ªãnh k·ª≥
   */
  startPeriodicCleanup(): void {
    // Ch·∫°y cleanup m·ªói 30 ph√∫t
    setInterval(async () => {
      await this.cleanupStaleData();
    }, 30 * 60 * 1000);

    // Ki·ªÉm tra admin user m·ªói 10 ph√∫t
    setInterval(async () => {
      await this.ensureAdminUserValid();
    }, 10 * 60 * 1000);

    console.log('‚úÖ Periodic cleanup started');
  }
}

export const autoCleanup = AutoCleanupManager.getInstance();